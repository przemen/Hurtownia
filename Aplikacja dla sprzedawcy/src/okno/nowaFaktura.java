/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package okno;

import db.Connector;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;

import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Przemek
 */
public class nowaFaktura extends javax.swing.JPanel {

    private final Connector con;
    private String selectWirsz;
    /* public TestPreview trw;*/
    private String IdFirma;
    private Date dataWyst;
    private Date dataPla;
    private String formaPatnosci;
    private JFrame f;
    private int[] rows;
    listaFaktur lF = null;
    private DecimalFormat df = new DecimalFormat("##0.00");
    /**
     * Creates new form nowaFaktura
     */
    public DefaultTableModel model;

    public nowaFaktura(Connector con, JFrame f) throws SQLException {

        this.IdFirma = "0";
        this.f = f;
        initComponents();
        jXTable1.setSortable(false);
        jComboBox1.removeAllItems();
        model = (DefaultTableModel) jXTable1.getModel();
        model.setRowCount(0);
        this.con = con;
        jTextField1.setEditable(false);
        dateDWystawienia.setDate(new Date());
        jXDatePicker1.setDate(new Date());
        jComboBox1.removeAllItems();
        jComboBox1.addItem("Gotówka");
        jComboBox1.addItem("Przelew 7 dni");
        jComboBox1.addItem("Przelew 14 dni");
        jComboBox1.addItem("Przelew");
        ustawNumer();
        txtNrDok.setEditable(false);
    }

    public nowaFaktura(Connector con, JFrame f, listaFaktur lF) throws SQLException {

        this.IdFirma = "0";
        this.f = f;
        initComponents();
        jXTable1.setSortable(false);
        jComboBox1.removeAllItems();
        model = (DefaultTableModel) jXTable1.getModel();
        model.setRowCount(0);
        this.con = con;
        jTextField1.setEditable(false);
        dateDWystawienia.setDate(new Date());
        jXDatePicker1.setDate(new Date());
        jComboBox1.removeAllItems();
        jComboBox1.addItem("Gotówka");
        jComboBox1.addItem("Przelew 7 dni");
        jComboBox1.addItem("Przelew 14 dni");
        jComboBox1.addItem("Przelew");
        ustawNumer();
        txtNrDok.setEditable(false);
        this.lF = lF;
    }

    public nowaFaktura(Connector con, JFrame f, String IdKlient) throws SQLException {

        this.IdFirma = "0";
        this.f = f;
        initComponents();
        jXTable1.setSortable(false);
        jComboBox1.removeAllItems();
        model = (DefaultTableModel) jXTable1.getModel();
        model.setRowCount(0);
        this.con = con;
        jTextField1.setEditable(false);
        dateDWystawienia.setEditable(false);
        dateDWystawienia.setDate(new Date());
        jComboBox1.removeAllItems();
        this.IdFirma = IdKlient;

        jComboBox1.addItem("Gotówka");
        jComboBox1.addItem("Przelew 7 dni");
        jComboBox1.addItem("Przelew 14 dni");
        jComboBox1.addItem("Przelew");
        ustawNumer();
        txtNrDok.setEditable(false);

        jButton7.setVisible(false);
   

        String query = "SELECT * FROM Firma WHERE Id = " + IdKlient;

        ResultSet rs = con.querySelect(query);
        String kientNazwa = "";
        while (rs.next()) {

            kientNazwa = rs.getString(2);

            break;
        }
        jTextField1.setText(kientNazwa);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNrDok = new javax.swing.JTextField();
        dateDWystawienia = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jXDatePicker2 = new org.jdesktop.swingx.JXDatePicker();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextField1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jLabel13 = new javax.swing.JLabel();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nazwa Towaru", "Ilość", "j.m", "Cena Netto", "VAT", "Wartość Netto", "Wartość VAT", "Wartość Brutto", "ID", "dostepne"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.getTableHeader().setReorderingAllowed(false);
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jXTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jXTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jXTable1);
        if (jXTable1.getColumnModel().getColumnCount() > 0) {
            jXTable1.getColumnModel().getColumn(1).setMinWidth(10);
            jXTable1.getColumnModel().getColumn(1).setPreferredWidth(120);
            jXTable1.getColumnModel().getColumn(1).setMaxWidth(120);
            jXTable1.getColumnModel().getColumn(2).setMinWidth(75);
            jXTable1.getColumnModel().getColumn(2).setPreferredWidth(75);
            jXTable1.getColumnModel().getColumn(2).setMaxWidth(75);
            jXTable1.getColumnModel().getColumn(3).setMinWidth(120);
            jXTable1.getColumnModel().getColumn(3).setPreferredWidth(120);
            jXTable1.getColumnModel().getColumn(3).setMaxWidth(120);
            jXTable1.getColumnModel().getColumn(4).setMinWidth(50);
            jXTable1.getColumnModel().getColumn(4).setPreferredWidth(50);
            jXTable1.getColumnModel().getColumn(4).setMaxWidth(50);
            jXTable1.getColumnModel().getColumn(5).setMinWidth(120);
            jXTable1.getColumnModel().getColumn(5).setPreferredWidth(120);
            jXTable1.getColumnModel().getColumn(5).setMaxWidth(120);
            jXTable1.getColumnModel().getColumn(6).setMinWidth(120);
            jXTable1.getColumnModel().getColumn(6).setPreferredWidth(120);
            jXTable1.getColumnModel().getColumn(6).setMaxWidth(120);
            jXTable1.getColumnModel().getColumn(7).setMinWidth(120);
            jXTable1.getColumnModel().getColumn(7).setPreferredWidth(120);
            jXTable1.getColumnModel().getColumn(7).setMaxWidth(120);
            jXTable1.getColumnModel().getColumn(8).setMinWidth(0);
            jXTable1.getColumnModel().getColumn(8).setPreferredWidth(0);
            jXTable1.getColumnModel().getColumn(8).setMaxWidth(0);
            jXTable1.getColumnModel().getColumn(9).setMinWidth(0);
            jXTable1.getColumnModel().getColumn(9).setPreferredWidth(0);
            jXTable1.getColumnModel().getColumn(9).setMaxWidth(0);
        }

        jLabel1.setText("Kontrahent");

        jLabel2.setText("Numer dokumentu");

        dateDWystawienia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateDWystawieniaActionPerformed(evt);
            }
        });

        jLabel3.setText("Data wystawienia");

        jLabel4.setText("Termin płatności");

        jXDatePicker2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gotówka", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Forma płatnosci");

        jLabel6.setText("Uwagi");

        jLabel7.setText("Notatka");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jButton1.setText("Dodaj");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Usuń");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Zapisz");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Zapisz i drukuj");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton7.setText("Z bazy");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel8.setText("Suma BRUTTO");

        jLabel9.setBackground(new java.awt.Color(0, 204, 153));
        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("0 ");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("zł");

        jButton2.setText("Anuluj");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setColumns(20);
        jTextField1.setRows(5);
        jScrollPane4.setViewportView(jTextField1);

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        jLabel11.setText("Kod/NIP klienta");

        jLabel12.setText("Kod towaru");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField3KeyReleased(evt);
            }
        });

        jXDatePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker1ActionPerformed(evt);
            }
        });

        jLabel13.setText("Data Sprzedaży");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addGap(10, 10, 10)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dateDWystawienia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane4)
                                            .addComponent(txtNrDok))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(128, 128, 128))
                                                .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(0, 238, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jLabel10)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel1)))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(txtNrDok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(dateDWystawienia, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jXDatePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel7))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(5, 5, 5)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton1)
                            .addComponent(jLabel12)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton5)
                    .addComponent(jButton4)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        //wybór klienta z bazy danych

        try {
            listaKlient lk = new listaKlient(con, 1);
            lk.setSize(640, 4801);

            // TODO add your handling code here:
            JOptionPane.showConfirmDialog(null, lk, "Wybierz Klienta",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            jTextField1.setEditable(true);
            jTextField1.setText(lk.selectName.replaceAll("<br/>", "\n"));
            IdFirma = lk.selectID;
            UpdateCeny();
            licz();
            System.out.println(IdFirma);
        } catch (SQLException ex) {
        }


    }//GEN-LAST:event_jButton7ActionPerformed

    private String ustawNumer() throws SQLException {
        String query = "SELECT * FROM Faktura ORDER BY Id DESC";
        ResultSet rs = con.querySelect(query);
        String nr = "";
        while (rs.next()) {
            nr = rs.getString(2);
            break;
        }
        txtNrDok.setText(numer(nr));
        return numer(nr);
    }

    public String numer(String numer) {
        Date date = new Date();

        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH) + 1;

        String nrY = "";
        String nrM = "";
        String nr = "";

        if (!numer.isEmpty()) {
            nrY = numer.substring(numer.length() - 4, numer.length());
            nrM = numer.substring(numer.length() - 7, numer.length() - 5);
            nr = numer.substring(0, numer.length() - 8);

            int nrY_int = Integer.parseInt(nrY);
            int nrM_int = Integer.parseInt(nrM);
            int nr_int = Integer.parseInt(nr);

            boolean flag = true;
            if (nrY_int < year || nrM_int < month) {
                nr_int = 1;
                flag = false;
            }
            if (nrY_int < year) {
                nrY_int = year;
                nrM_int = month;
            }
            
                nrM_int = month;
           
            
             

            if (flag) {
                nr = Integer.toString(nr_int + 1);
            } else {
                nr = Integer.toString(nr_int);
            }

            if (nrM_int < 10) {
                nrM = "0" + Integer.toString(nrM_int);
            } else {
                nrM = Integer.toString(nrM_int);
            }
            nrY = Integer.toString(nrY_int);

        } else {

            if (month < 10) {
                nrM = "0" + Integer.toString(month);
            } else {
                nrM = Integer.toString(month);
            }
            nrY = Integer.toString(year);

            nr = "1";
        }
        String newNumer = nr + "/" + nrM + "/" + nrY;

        return newNumer;
    }

    private void UpdateCeny() throws SQLException {

        for (int i = 0; i < model.getRowCount(); i++) {
            String query = null;
            SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");      String dataS= DATE_FORMAT.format(jXDatePicker1.getDate());

            query = "IF EXISTS (SELECT * FROM TOWAR "
                    + "INNER JOIN Kategoria ON Towar.IdKategoria = Kategoria.Id "
                    + "INNER JOIN JednostkaMiary ON Towar.JednostkaMiary = JednostkaMiary.Id "
                    + "LEFT JOIN CennikIndywidualny ON Towar.Id = CennikIndywidualny.IdTowar "
                    + "WHERE "
                    + "(CennikIndywidualny.DataKoncowa IS NULL OR  '"+dataS+"' <= CennikIndywidualny.DataKoncowa) AND '"+dataS+"' >= CennikIndywidualny.DataPoczatkowa AND CennikIndywidualny.IdKlient= " + IdFirma + " AND Towar.Id = " + jXTable1.getValueAt(i, 8) + " )  "
                    + "SELECT Towar.Id, Towar.Nazwa, Towar.PKWiU, JednostkaMiary.skrot, CennikIndywidualny.Cena, CennikIndywidualny.Id, Towar.VAT  FROM TOWAR "
                    + "INNER JOIN Kategoria ON Towar.IdKategoria = Kategoria.Id "
                    + "INNER JOIN JednostkaMiary ON Towar.JednostkaMiary = JednostkaMiary.Id "
                    + "LEFT JOIN CennikIndywidualny ON Towar.Id = CennikIndywidualny.IdTowar "
                    + "WHERE (CennikIndywidualny.DataKoncowa IS NULL OR  '"+dataS+"' <= CennikIndywidualny.DataKoncowa) AND '"+dataS+"' >= CennikIndywidualny.DataPoczatkowa AND CennikIndywidualny.IdKlient= " + IdFirma + " AND Towar.Id = " + jXTable1.getValueAt(i, 8) + "  "
                    + "ORDER BY CennikIndywidualny.Id DESC "
                    + "ELSE "
                    + "SELECT Towar.Id, Towar.Nazwa, Towar.PKWiU, JednostkaMiary.skrot, Cennik.Cena, Cennik.ID, Towar.VAT  FROM TOWAR "
                    + "INNER JOIN Kategoria ON Towar.IdKategoria = Kategoria.Id "
                    + "INNER JOIN JednostkaMiary ON Towar.JednostkaMiary = JednostkaMiary.Id "
                    + "LEFT JOIN Cennik ON Towar.Id = Cennik.IdTowar "
                    + "WHERE (Cennik.DataKoncowa IS NULL OR  '"+dataS+"' <= Cennik.DataKoncowa) AND '"+dataS+"' >= Cennik.DataPoczatkowa AND Towar.Id = " + jXTable1.getValueAt(i, 8) + " ORDER BY Cennik.Id DESC";

            ResultSet rs = con.querySelect(query);
System.out.println(query);
            while (rs.next()) {
                
                jXTable1.getColumnExt(3).setEditable(true);
                jXTable1.setValueAt(df.format(rs.getDouble(5)), i, 3);
                jXTable1.getColumnExt(3).setEditable(false);
                break;
            }

        }
        licz();
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // wybór towaru z listy towarów
        if (IdFirma.equals("0")) {
            JOptionPane.showMessageDialog(null, "Proszę wybrać kliena", "INFO", JOptionPane.INFORMATION_MESSAGE);
        } else {
            listaTowarow lt;
            try {
                lt = new listaTowarow(con, 1);

               int result = JOptionPane.showConfirmDialog(null, lt, "Wybierz Towar",
                        JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
               if (result == JOptionPane.YES_OPTION){
               String query;
                    SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");     
                    String dataS= DATE_FORMAT.format(jXDatePicker1.getDate());

                query = "IF EXISTS (SELECT * FROM TOWAR "
                        + "INNER JOIN Kategoria ON Towar.IdKategoria = Kategoria.Id "
                        + "INNER JOIN JednostkaMiary ON Towar.JednostkaMiary = JednostkaMiary.Id "
                        + "LEFT JOIN CennikIndywidualny ON Towar.Id = CennikIndywidualny.IdTowar "
                        + "WHERE "
                        + "(CennikIndywidualny.DataKoncowa IS NULL OR  '"+dataS+"' <= CennikIndywidualny.DataKoncowa) AND '"+dataS+"' >= CennikIndywidualny.DataPoczatkowa AND CennikIndywidualny.IdKlient= " + IdFirma + " AND Towar.Id = " + lt.SelectID + " )  "
                        + "SELECT Towar.Id, Towar.Nazwa, Towar.PKWiU, JednostkaMiary.skrot, CennikIndywidualny.Cena, CennikIndywidualny.Id, Towar.VAT, Towar.dostepne FROM TOWAR "
                        + "INNER JOIN Kategoria ON Towar.IdKategoria = Kategoria.Id "
                        + "INNER JOIN JednostkaMiary ON Towar.JednostkaMiary = JednostkaMiary.Id "
                        + "LEFT JOIN CennikIndywidualny ON Towar.Id = CennikIndywidualny.IdTowar "
                        + "WHERE (CennikIndywidualny.DataKoncowa IS NULL OR '"+dataS+"' <= CennikIndywidualny.DataKoncowa) AND '"+dataS+"' >= CennikIndywidualny.DataPoczatkowa AND CennikIndywidualny.IdKlient= " + IdFirma + " AND Towar.Id = " + lt.SelectID + "  "
                        + "ORDER BY CennikIndywidualny.Id DESC "
                        + "ELSE "
                        + "SELECT Towar.Id, Towar.Nazwa, Towar.PKWiU, JednostkaMiary.skrot, Cennik.Cena, Cennik.ID, Towar.VAT, Towar.dostepne FROM TOWAR "
                        + "INNER JOIN Kategoria ON Towar.IdKategoria = Kategoria.Id "
                        + "INNER JOIN JednostkaMiary ON Towar.JednostkaMiary = JednostkaMiary.Id "
                        + "LEFT JOIN Cennik ON Towar.Id = Cennik.IdTowar "
                        + "WHERE (Cennik.DataKoncowa IS NULL OR  '"+dataS+"' <= Cennik.DataKoncowa) AND '"+dataS+"' >= Cennik.DataPoczatkowa AND Towar.Id = " + lt.SelectID + " ORDER BY Cennik.Id DESC";

                ResultSet rs = con.querySelect(query);

                while (rs.next()) {
                    if(uzytoTowar(rs.getString(1))){
                        
                    model.addRow(new Object[]{rs.getString(2), "", rs.getString(4), df.format(rs.getDouble(5)), rs.getString(7), "", "", "", rs.getString(1), rs.getString(8)});
                    break;}
                    else  {JOptionPane.showMessageDialog(null, "Wybrany towar znajduje się już na fakturze.\n"
                            + "Proszę zwiększuć ilość towaru w istniejącym wierszu", "INFO", JOptionPane.INFORMATION_MESSAGE);
                    break;}
                }
            }
            } catch (SQLException ex) {
                Logger.getLogger(nowaFaktura.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private boolean uzytoTowar(String id) {
        for (int i = 0; i<jXTable1.getRowCount();i++)
        {
            if( jXTable1.getValueAt(i, 8).equals(id)){return false;}
        }
        return true;
    }
    private void dateDWystawieniaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateDWystawieniaActionPerformed

        ustawDate();

    }//GEN-LAST:event_dateDWystawieniaActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        Object cmboitem = jComboBox1.getSelectedItem();
        formaPatnosci = (String) cmboitem;
        ustawDate();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void ustawDate() {

        if ("Przelew 7 dni".equals(formaPatnosci)) {
            Date dw = dateDWystawienia.getDate();
            Date next;
            try {
                next = new Date(dw.getTime() + (8 * 1000 * 60 * 60 * 24));
            } catch (NullPointerException | IllegalArgumentException ex) {
                next = new Date(new Date().getTime() + (8 * 1000 * 60 * 60 * 24));
            }
            jXDatePicker2.setDate(next);

        }

        if ("Przelew 14 dni".equals(formaPatnosci)) {
            Date dw = dateDWystawienia.getDate();
            Date next;
            try {
                next = new Date(dw.getTime() + (15 * 1000 * 60 * 60 * 24));
            } catch (NullPointerException | IllegalArgumentException ex) {
                next = new Date(new Date().getTime() + (15 * 1000 * 60 * 60 * 24));
            }
            jXDatePicker2.setDate(next);

        }

        if ("Gotówka".equals(formaPatnosci)) {
            Date dw = dateDWystawienia.getDate();
            Date next;
            try {
                next = new Date(dw.getTime());
            } catch (NullPointerException | IllegalArgumentException ex) {
                next = new Date(new Date().getTime());
            }
            jXDatePicker2.setDate(next);

        }

        if ("Przelew".equals(formaPatnosci)) {

            jXDatePicker2.setEditable(true);
        }

    }


    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // usuwanie wiersza towarów 

        model.removeRow(jXTable1.getSelectedRow());

    }//GEN-LAST:event_jButton3ActionPerformed

    private void licz() {
        Double suma;
        suma = 0.00;
        for (int i = 0; i < jXTable1.getRowCount(); i++) {
            String ilosc = jXTable1.getValueAt(i, 1).toString();
            String cNetto = jXTable1.getValueAt(i, 3).toString().replaceAll(",", ".");
            String VAT = jXTable1.getValueAt(i, 4).toString();

            Double il, cN, V;
            try {
                il = Double.parseDouble(ilosc);
                cN = Double.parseDouble(cNetto);
                V = Double.parseDouble(VAT);

                Double wNetto = il * cN;
                Double wVAT = (il * V * cN) / 100;
                Double wBrutto = wNetto + wVAT;

                jXTable1.getColumnExt(5).setEditable(true);
                jXTable1.getColumnExt(6).setEditable(true);
                jXTable1.getColumnExt(7).setEditable(true);

                jXTable1.setValueAt(df.format(wNetto), i, 5);
                jXTable1.setValueAt(df.format(wVAT), i, 6);
                jXTable1.setValueAt(df.format(wBrutto), i, 7);

                jXTable1.getColumnExt(5).setEditable(false);
                jXTable1.getColumnExt(6).setEditable(false);
                jXTable1.getColumnExt(7).setEditable(false);

                suma = suma + wBrutto;
            } catch (NumberFormatException e) {
            }

        }
        jLabel9.setText(df.format(suma));

    }

    public void walidacjaIlosc() {
        Double ilosc = 0.0;
        Double dostepne = 0.0;
        try {
            ilosc = Double.parseDouble(jXTable1.getValueAt(jXTable1.getSelectedRow(), 1).toString());
        } catch (NumberFormatException | IndexOutOfBoundsException e) {
            dostepne = 0.0;
        }
        try {
            dostepne = Double.parseDouble(jXTable1.getValueAt(jXTable1.getSelectedRow(), 9).toString());
        } catch (NumberFormatException | NullPointerException e) {
            dostepne = 0.0;
        }

        if (ilosc > dostepne) {
            JOptionPane.showMessageDialog(null, "Podana ilość towaru jest większa od posiadanej\n"
                    + "Dostępna ilość towaru to  " + (String) jXTable1.getValueAt(jXTable1.getSelectedRow(), 9)
                    + " " + (String) jXTable1.getValueAt(jXTable1.getSelectedRow(), 2), "ERROR", JOptionPane.INFORMATION_MESSAGE);
            jXTable1.setValueAt(dostepne, jXTable1.getSelectedRow(), 1);
            jXTable1MouseClicked(null);
        }
    }

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
        walidacjaIlosc();

        licz();
    }//GEN-LAST:event_jXTable1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        boolean validate = true;

        for (int i = 0; i < model.getRowCount(); i++) {
            String str = jXTable1.getValueAt(i, 1).toString();
            if (str.equals("")) {

                JOptionPane.showMessageDialog(null, "Proszę uzupełnić dane ", "INFO", JOptionPane.INFORMATION_MESSAGE);
                validate = false;
                break;
            }
        }
        if (validate && model.getRowCount() > 0) {

            SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");

            String dateW = DATE_FORMAT.format(dateDWystawienia.getDate());
            String dateP = DATE_FORMAT.format(jXDatePicker2.getDate());
            String dateS = DATE_FORMAT.format(jXDatePicker1.getDate());
            Object cmboitem = jComboBox1.getSelectedItem();
            formaPatnosci = (String) cmboitem;
            licz();
            try {
                String query = "INSERT INTO Faktura ( numer, DataWystawienia, TerminZaplaty,DataSprzedazy, FormaZaplaty, "
                        + "Uwagi, Notatki, IdKlient,wartoscBrutto ,KlientNazwa, KlintNIP, KlientAdres ) SELECT "
                        + " '" + ustawNumer() + "',"
                        + " '" + dateW + "', "
                        + " '" + dateP + "', "
                        + " '" + dateS + "', "
                        + " '" + formaPatnosci + "', "
                        + " '" + jTextArea2.getText().replaceAll("\n", "\\n") + "', "
                        + " '" + jTextArea1.getText().replaceAll("\n", "<br/>") + "', "
                        + " '" + IdFirma + "', "
                        + " '" + jLabel9.getText().replaceAll(",", ".").replaceAll(" ", "") + "', "
                        + "Nazwa, NIP, CASE WHEN NrLokalu = '' THEN Ulica + ' ' + NrBudynku + ' ' + KodPocztowy + ' ' + Miejscowosc ELSE "
                        + "Ulica + ' ' +NrLokalu+'/'+ NrBudynku + ' ' + KodPocztowy + ' ' + Miejscowosc END as adres"
                        + " FROM Firma where Id =" + IdFirma;
                System.out.println(query);

                con.query(query);
                query = "SELECT * FROM Faktura ORDER BY Id DESC";

                ResultSet rs = con.querySelect(query);
                String Id = "";
                while (rs.next()) {
                    Id = rs.getString(1);
                    break;
                }

                for (int i = 0; i < model.getRowCount(); i++) {
                    String str = jXTable1.getValueAt(i, 1).toString();

                    query = "INSERT INTO PozycjaFaktury (Towar, IdFaktura, ilosc, CenaNetto, VAT, jm) VALUES("
                            + " '" + jXTable1.getValueAt(i, 8).toString() + "',"
                            + " " + Id + ", "
                            + " '" + jXTable1.getValueAt(i, 1).toString().replaceAll(",", ".") + "', " //ilosc
                            + " '" + jXTable1.getValueAt(i, 3).toString().replaceAll(",", ".") + "', " // cena netto
                            + " '" + jXTable1.getValueAt(i, 4).toString().replaceAll(",", ".") + "', " // Vat%
                            + " '" + jXTable1.getValueAt(i, 2).toString() + "' " // jm
                            + ")";

                    con.query(query);

                    query = "UPDATE Towar SET dostepne = dostepne -" + jXTable1.getValueAt(i, 1).toString().replaceAll(",", ".") + " where id = " + jXTable1.getValueAt(i, 8).toString();;
                    con.query(query);
                    f.dispose();
                    
                    try {
                    if (!lF.equals(null)) {
                        lF.wypiszDB();
                    }
                    }catch(java.lang.NullPointerException ex){}
                }

            } catch (SQLException ex) {
                Logger.getLogger(nowaFaktura.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {

            JOptionPane.showMessageDialog(null, "Proszę uzupełnić dane ", "INFO", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jXTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jXTable1KeyReleased
        walidacjaIlosc();
        licz();
    }//GEN-LAST:event_jXTable1KeyReleased

    private void jXDatePicker2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker2ActionPerformed

    }//GEN-LAST:event_jXDatePicker2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        f.dispose();


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            try {

                String query = "SELECT * FROM Firma WHERE KodKlienta = '" + jTextField2.getText() + "' OR "
                        + "NIP = '" + jTextField2.getText() + "'";

                ResultSet rs = con.querySelect(query);

                while (rs.next()) {

                    IdFirma = rs.getString(1);
                    jTextField1.setText(rs.getString(2));
                    break;
                }

            } catch (SQLException ex) {
                Logger.getLogger(nowaFaktura.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyReleased

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (IdFirma.equals("0")) {
                JOptionPane.showMessageDialog(null, "Proszę wybrać kliena", "INFO", JOptionPane.INFORMATION_MESSAGE);
            } else {

                try {

                    String query;
  SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");      String dataS= DATE_FORMAT.format(jXDatePicker1.getDate());

                    query = "IF EXISTS (SELECT * FROM TOWAR "
                            + "INNER JOIN Kategoria ON Towar.IdKategoria = Kategoria.Id "
                            + "INNER JOIN JednostkaMiary ON Towar.JednostkaMiary = JednostkaMiary.Id "
                            + "LEFT JOIN CennikIndywidualny ON Towar.Id = CennikIndywidualny.IdTowar "
                            + "WHERE "
                            + "(CennikIndywidualny.DataKoncowa IS NULL OR  '"+dataS+"' <= CennikIndywidualny.DataKoncowa) AND '"+dataS+"' >= CennikIndywidualny.DataPoczatkowa AND CennikIndywidualny.IdKlient= " + IdFirma + " AND Towar.KodTowaru = '" + jTextField3.getText() + "' )  "
                            + "SELECT Towar.Id, Towar.Nazwa, Towar.PKWiU, JednostkaMiary.skrot, CennikIndywidualny.Cena, CennikIndywidualny.Id, Towar.VAT, Towar.dostepne, Towar.KodTowaru FROM TOWAR "
                            + "INNER JOIN Kategoria ON Towar.IdKategoria = Kategoria.Id "
                            + "INNER JOIN JednostkaMiary ON Towar.JednostkaMiary = JednostkaMiary.Id "
                            + "LEFT JOIN CennikIndywidualny ON Towar.Id = CennikIndywidualny.IdTowar "
                            + "WHERE (CennikIndywidualny.DataKoncowa IS NULL OR  '"+dataS+"' <= CennikIndywidualny.DataKoncowa) AND '"+dataS+"' >= CennikIndywidualny.DataPoczatkowa AND CennikIndywidualny.IdKlient= " + IdFirma + " AND Towar.KodTowaru = '"
                            + jTextField3.getText() + "'  "
                            + "ORDER BY CennikIndywidualny.Id DESC "
                            + "ELSE "
                            + "SELECT Towar.Id, Towar.Nazwa, Towar.PKWiU, JednostkaMiary.skrot, Cennik.Cena, Cennik.ID, Towar.VAT, Towar.dostepne FROM TOWAR "
                            + "INNER JOIN Kategoria ON Towar.IdKategoria = Kategoria.Id "
                            + "INNER JOIN JednostkaMiary ON Towar.JednostkaMiary = JednostkaMiary.Id "
                            + "LEFT JOIN Cennik ON Towar.Id = Cennik.IdTowar "
                            + "WHERE (Cennik.DataKoncowa IS NULL OR  '"+dataS+"' <= Cennik.DataKoncowa) AND '"+dataS+"' >= Cennik.DataPoczatkowa AND Towar.KodTowaru = '" + jTextField3.getText() + "' ORDER BY Cennik.Id DESC";

                    ResultSet rs = con.querySelect(query);

                     while (rs.next()) {
                    if(uzytoTowar(rs.getString(1))){
                    model.addRow(new Object[]{rs.getString(2), "", rs.getString(4), df.format(rs.getDouble(5)), rs.getString(7), "", "", "", rs.getString(1), rs.getString(8)});
                    jTextField3.setText("");
                    break;}
                    else { JOptionPane.showMessageDialog(null, "Wybrany towar znajduje się już na fakturze.\n"
                            + "Proszę zwiększuć ilość towaru w istniejącym wierszu", "INFO", JOptionPane.INFORMATION_MESSAGE);  jTextField3.setText(""); break;
                    }
                }
                     

                } catch (SQLException ex) {
                    Logger.getLogger(nowaFaktura.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

    }//GEN-LAST:event_jTextField3KeyReleased

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        licz();

        boolean validate = true;

        for (int i = 0; i < model.getRowCount(); i++) {
            String str = jXTable1.getValueAt(i, 1).toString();
            if (str.equals("")) {

                JOptionPane.showMessageDialog(null, "Proszę uzupełnić dane ", "INFO", JOptionPane.INFORMATION_MESSAGE);
                validate = false;
                break;
            }
        }
        if (validate && model.getRowCount() > 0) {

            SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");

            String dateW = DATE_FORMAT.format(dateDWystawienia.getDate());
            String dateP = DATE_FORMAT.format(jXDatePicker2.getDate());
            String dateS = DATE_FORMAT.format(jXDatePicker1.getDate());
            Object cmboitem = jComboBox1.getSelectedItem();
            formaPatnosci = (String) cmboitem;

            try {
                String query = "INSERT INTO Faktura ( numer, DataWystawienia, TerminZaplaty,DataSprzedazy, FormaZaplaty, "
                        + "Uwagi, Notatki, IdKlient,wartoscBrutto ,KlientNazwa, KlintNIP, KlientAdres ) SELECT "
                        + " '" + ustawNumer() + "',"
                        + " '" + dateW + "', "
                        + " '" + dateP + "', "
                        + " '" + dateS + "', "
                        + " '" + formaPatnosci + "', "
                        + " '" + jTextArea2.getText().replaceAll("\n", "\\n") + "', "
                        + " '" + jTextArea1.getText().replaceAll("\n", "<br/>") + "', "
                        + " '" + IdFirma + "', "
                        + " '" + jLabel9.getText().replaceAll(",", ".").replaceAll(" ", "") + "', "
                        + "Nazwa, NIP, CASE WHEN NrLokalu = '' THEN Ulica + ' ' + NrBudynku + ' ' + KodPocztowy + ' ' + Miejscowosc ELSE "
                        + "Ulica + ' ' +NrLokalu+'/'+ NrBudynku + ' ' + KodPocztowy + ' ' + Miejscowosc END as adres"
                        + " FROM Firma where Id =" + IdFirma;

                System.out.println(query);

                con.query(query);
                query = "SELECT * FROM Faktura ORDER BY Id DESC";

                ResultSet rs = con.querySelect(query);
                String Id = "";
                while (rs.next()) {
                    Id = rs.getString(1);
                    break;
                }

                for (int i = 0; i < model.getRowCount(); i++) {
                    String str = jXTable1.getValueAt(i, 1).toString();

                    query = "INSERT INTO PozycjaFaktury (Towar, IdFaktura, ilosc, CenaNetto, VAT, jm) VALUES("
                            + " '" + jXTable1.getValueAt(i, 8).toString() + "',"
                            + " " + Id + ", "
                            + " '" + jXTable1.getValueAt(i, 1).toString().replaceAll(",", ".") + "', " //ilosc
                            + " '" + jXTable1.getValueAt(i, 3).toString().replaceAll(",", ".") + "', " // cena netto
                            + " '" + jXTable1.getValueAt(i, 4).toString().replaceAll(",", ".") + "', " // Vat%
                            + " '" + jXTable1.getValueAt(i, 2).toString() + "' " // jm
                            + ")";

                    con.query(query);
                    System.out.println(query);
                    query = "UPDATE Towar SET dostepne = dostepne -" + jXTable1.getValueAt(i, 1).toString() + " where id = " + jXTable1.getValueAt(i, 8).toString();;
                    con.query(query);
                    f.dispose();
                }

                try {
                    Druk d = new Druk(con, 1, Id);
                } catch (SQLException ex) {
                    Logger.getLogger(nowaFaktura.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (SQLException ex) {
                Logger.getLogger(nowaFaktura.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {

            JOptionPane.showMessageDialog(null, "Proszę uzupełnić dane ", "INFO", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jXDatePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker1ActionPerformed
        try {
            // TODO add your handling code here:
            UpdateCeny();
        } catch (SQLException ex) {
          
        }
    }//GEN-LAST:event_jXDatePicker1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker dateDWystawienia;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker2;
    private org.jdesktop.swingx.JXTable jXTable1;
    private javax.swing.JTextField txtNrDok;
    // End of variables declaration//GEN-END:variables
}
